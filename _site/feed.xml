<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-10-05T18:00:59+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">rahimi-mohd.github.io</title><entry><title type="html">Easiest Way To Setup Neovim In Debian</title><link href="http://localhost:4000/2024/10/05/easiest-way-to-setup-neovim-in-debian.html" rel="alternate" type="text/html" title="Easiest Way To Setup Neovim In Debian" /><published>2024-10-05T00:00:00+08:00</published><updated>2024-10-05T00:00:00+08:00</updated><id>http://localhost:4000/2024/10/05/easiest-way-to-setup-neovim-in-debian</id><content type="html" xml:base="http://localhost:4000/2024/10/05/easiest-way-to-setup-neovim-in-debian.html"><![CDATA[<div class="tldr">
  Emacs users are banned from this post!
</div>

<div class="title-font">
    <h3>Introduction</h3>
</div>

<p>Nah, I’m kidding ! Emacs users or any IDE users are welcome in this post. I actually use VSCode and Neovim interchangeably due to several reason which I will explain later. So, what’s so hard about <strong>how to setup Neovim in Debian</strong> ? You just have to install it with <code class="language-plaintext highlighter-rouge">$ sudo apt install neovim</code> and call it with <code class="language-plaintext highlighter-rouge">nvim</code> command right ? Well, yes and no.</p>

<p>If you want to set it up manually, then you’re more than welcome to use command above and stop reading this post, stop wasting your time and go do something valuable. The reason why I’m writing this is: for someone who want to use Neovim’s distribution?–I don’t know what you called it, distribution or flavour? Or something like that–like LazyVim etc.</p>

<p>“I’m very excited to install Neovim with LazyVim, every YouTuber are using it and it’ll be shame if I didn’t learn it”. If we go to LazyVim official website, you will be disappointed when you see the main requirement is Neovim &gt;= 0.9.0, which needed to be built with LuaJIT. Oh no, let’s check which version comes with Debian.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">apt search neovim</code></pre></figure>

<p>And we can see that it will return.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">neovim/stable 0.7.2-7 amd64
  heavily refactored vim fork</code></pre></figure>

<p>“God, we can’t install LazyVim with this version ! Should we look for another IDE ? Or even better, to look for another distros which come with latest version of Neovim ?”, This may be what’s in your small brain–for now–after you see <strong>neovim/stable 0.7.2-7</strong>, very stable indeed.</p>

<div class="title-font">
    <h3>Setup</h3>
</div>

<p>Now, if this is your problem, come along, I have a solution for you. What ? Flatpak ? Well, maybe you can use Flatpak, but I’m going to show how you can use App Image instead.</p>

<p>First of all, we have to download the App Image from Neovim’s GitHub, you can do this by using curl.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">curl <span class="nt">-LO</span> https://github.com/neovim/neovim/releases/latest/download/nvim.appimage</code></pre></figure>

<p>Then, turn it into executable, what’s the point of a program if you can’t execute it right ?</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">chmod </span>u+x nvim.appimage <span class="c"># there another way to do this by using numbering, but...idk :p</span></code></pre></figure>

<p>Lastly, we have to move this App Image to our path, I choose <code class="language-plaintext highlighter-rouge">/usr/local/bin/</code>.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">echo</span> <span class="nv">$PATH</span> <span class="c"># will list down all PATH in your system</span>
<span class="nb">sudo mv </span>nvim.appimage /usr/local/bin/nvim <span class="c"># move the App Image from current folder to path with the name nvim</span></code></pre></figure>

<p><strong>NOTE</strong>: Notice that I use sudo because you need to have super user permission to move something into /usr/local/bin/. Then, I change nvim.appimage to only nvim(the last line) so that I can call it nvim instead of nvim.appimage anytime I want to use it. <strong>END</strong></p>

<p>This is it, now you can install LazyVim with this version of Neovim–which currently v0.10.2–how fun is that ? The only cons of using App Image: You have download the Neovim App Image and redo all this step every time there’s new version release and you want to update. This is because App Image didn’t work like package manager, you are the manager for them–or maybe there is App Image manager out there which I didn’t explore yet, since I rarely use app image.</p>

<div class="title-font">
    <h3>The Problem</h3>
</div>

<p>Now, maybe you’re asking me, “Why you’re still using VSCode if you like Neovim so much ?”. Well, the reason is……hmmm….How do I explain this ?</p>

<p>The problem is: I can’t push my code to GitHub. When I do <code class="language-plaintext highlighter-rouge">git push</code>, It always asked for username and password, which in turn will return error every time. But, it worked just fine when I push it using VSCode git extension, that’s the reason why I use VSCode.</p>

<p>“What’s so stupid about that?” You may asked. It’s stupid because I’ve just realized–actually this past few days–that I’ve clone all my repo using HTTPS instead of SSH and that’s the reason why I can’t push to GitHub. If you’re wondering, I follow the instructions from The Odin Project and I actually use this step several time, and it doesn’t work every time–push to GitHub.</p>

<p>Then, I reread the instructions and you know what, you literally have to generate <strong>SSH_KEYGEN</strong> and copy it to your <strong>SSH and GPG keys</strong> setting. Tell me, “Why on earth I can’t figure it out until now that this setup is meant for SSH and still do clone in HTTPS?”. It obviously tell that this is for SSH, not HTTPS. Well, I learn from my mistake and yeah, if there’re people out there who face the similar problem like me–doubt there is–here are the solution, clone your repo using SSH instead of HTTPS.</p>

<div class="title-font">
    <h3>Conclusion</h3>
</div>

<p>Well, you actually have other options to install the latest version of Neovim such as Flatpak, build from source, etc. That’s the beauty of open source program where you have other alternative to choose from. I hope you have fun with you new Neovim with LazyVim setup and get good with it. And I really hope we can learn a thing or two from this post, mainly to <strong>read instructions carefully and to try understand them before running amok</strong>……CYA!</p>

<div class="title-font">
    <h3>References</h3>
</div>

<ol>
  <li>LazyVim: <a href="https://www.lazyvim.org/">link</a></li>
  <li>Setting up Git by The Odin Project: <a href="https://www.theodinproject.com/lessons/foundations-setting-up-git">link</a></li>
</ol>]]></content><author><name>rahimi</name></author><summary type="html"><![CDATA[Emacs users are banned from this post! Introduction Nah, I’m kidding ! Emacs users or any IDE users are welcome in this post. I actually use VSCode and Neovim interchangeably due to several reason which I will explain later. So, what’s so hard about how to setup Neovim in Debian ? You just have to install it with $ sudo apt install neovim and call it with nvim command right ? Well, yes and no. If you want to set it up manually, then you’re more than welcome to use command above and stop reading this post, stop wasting your time and go do something valuable. The reason why I’m writing this is: for someone who want to use Neovim’s distribution?–I don’t know what you called it, distribution or flavour? Or something like that–like LazyVim etc. “I’m very excited to install Neovim with LazyVim, every YouTuber are using it and it’ll be shame if I didn’t learn it”. If we go to LazyVim official website, you will be disappointed when you see the main requirement is Neovim &gt;= 0.9.0, which needed to be built with LuaJIT. Oh no, let’s check which version comes with Debian. apt search neovim And we can see that it will return. neovim/stable 0.7.2-7 amd64 heavily refactored vim fork “God, we can’t install LazyVim with this version ! Should we look for another IDE ? Or even better, to look for another distros which come with latest version of Neovim ?”, This may be what’s in your small brain–for now–after you see neovim/stable 0.7.2-7, very stable indeed. Setup Now, if this is your problem, come along, I have a solution for you. What ? Flatpak ? Well, maybe you can use Flatpak, but I’m going to show how you can use App Image instead. First of all, we have to download the App Image from Neovim’s GitHub, you can do this by using curl. curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage Then, turn it into executable, what’s the point of a program if you can’t execute it right ? chmod u+x nvim.appimage # there another way to do this by using numbering, but...idk :p Lastly, we have to move this App Image to our path, I choose /usr/local/bin/. echo $PATH # will list down all PATH in your system sudo mv nvim.appimage /usr/local/bin/nvim # move the App Image from current folder to path with the name nvim NOTE: Notice that I use sudo because you need to have super user permission to move something into /usr/local/bin/. Then, I change nvim.appimage to only nvim(the last line) so that I can call it nvim instead of nvim.appimage anytime I want to use it. END This is it, now you can install LazyVim with this version of Neovim–which currently v0.10.2–how fun is that ? The only cons of using App Image: You have download the Neovim App Image and redo all this step every time there’s new version release and you want to update. This is because App Image didn’t work like package manager, you are the manager for them–or maybe there is App Image manager out there which I didn’t explore yet, since I rarely use app image. The Problem Now, maybe you’re asking me, “Why you’re still using VSCode if you like Neovim so much ?”. Well, the reason is……hmmm….How do I explain this ? The problem is: I can’t push my code to GitHub. When I do git push, It always asked for username and password, which in turn will return error every time. But, it worked just fine when I push it using VSCode git extension, that’s the reason why I use VSCode. “What’s so stupid about that?” You may asked. It’s stupid because I’ve just realized–actually this past few days–that I’ve clone all my repo using HTTPS instead of SSH and that’s the reason why I can’t push to GitHub. If you’re wondering, I follow the instructions from The Odin Project and I actually use this step several time, and it doesn’t work every time–push to GitHub. Then, I reread the instructions and you know what, you literally have to generate SSH_KEYGEN and copy it to your SSH and GPG keys setting. Tell me, “Why on earth I can’t figure it out until now that this setup is meant for SSH and still do clone in HTTPS?”. It obviously tell that this is for SSH, not HTTPS. Well, I learn from my mistake and yeah, if there’re people out there who face the similar problem like me–doubt there is–here are the solution, clone your repo using SSH instead of HTTPS. Conclusion Well, you actually have other options to install the latest version of Neovim such as Flatpak, build from source, etc. That’s the beauty of open source program where you have other alternative to choose from. I hope you have fun with you new Neovim with LazyVim setup and get good with it. And I really hope we can learn a thing or two from this post, mainly to read instructions carefully and to try understand them before running amok……CYA! References LazyVim: link Setting up Git by The Odin Project: link]]></summary></entry><entry><title type="html">Django Get Initial Data In Forms</title><link href="http://localhost:4000/2024/08/31/django-get-initial-data-in-forms.html" rel="alternate" type="text/html" title="Django Get Initial Data In Forms" /><published>2024-08-31T00:00:00+08:00</published><updated>2024-08-31T00:00:00+08:00</updated><id>http://localhost:4000/2024/08/31/django-get-initial-data-in-forms</id><content type="html" xml:base="http://localhost:4000/2024/08/31/django-get-initial-data-in-forms.html"><![CDATA[<div class="tldr">
    This is how you can get initial data--from models--and show it in form's field.
</div>
<p>I’m on the journey to finish my diploma Final Year Project, I’ll be building a Clinic Management System using Python Django on the Back-end, Html, Css and Bootstrap5 for the Front-end. In this blog, I want to explain about how we can can get data from primary key and fill a form using it using Class Based View (CBV).</p>

<p>The situation is, I want to implement a check in system, where I can check in patient who came to the clinic, and render the data on the webpage. The check in list will be easy, I just have to use to inherit/extends <code class="language-plaintext highlighter-rouge">ListView</code>. Example:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">clinic</span><span class="o">/</span><span class="n">urls</span><span class="p">.</span><span class="n">py</span>

<span class="p">...</span>
<span class="n">app_name</span> <span class="o">=</span> <span class="s">"clinic"</span>
<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">"checkin_list/"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">ListCheckInPageView</span><span class="p">.</span><span class="n">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="s">"checkin_list"</span><span class="p">),</span>
<span class="p">]</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">clinic</span><span class="o">/</span><span class="n">views</span><span class="p">.</span><span class="n">py</span>

<span class="k">class</span> <span class="nc">ListCheckInPageView</span><span class="p">(</span><span class="n">ListView</span><span class="p">):</span>
    <span class="n">template_name</span> <span class="o">=</span> <span class="s">"clinic/checkin_list.html"</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">CheckIn</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">().</span><span class="n">order_by</span><span class="p">(</span><span class="s">"-check_in_time"</span><span class="p">)</span> <span class="c1"># this will display the latest on top
</span>    <span class="n">context_object_name</span> <span class="o">=</span> <span class="s">"checkin_list"</span></code></pre></figure>

<hr />

<p>Now, this is easy right ? Well, kinda. The problem is when you want to check in patient based on their data. I have two situation where I want to check in patient 1) from the check in list, I want to implement a link/button to create new check in 2) from patient detail, I want to directly check in current patient and automatically get their data. Situation 1 should be easy to implement, example:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">clinic</span><span class="o">/</span><span class="n">urls</span><span class="p">.</span><span class="n">py</span>

<span class="p">...</span> <span class="n">new</span> <span class="n">code</span>

<span class="n">path</span><span class="p">(</span><span class="s">"checkin_list/checkin/"</span> <span class="n">views</span><span class="p">.</span><span class="n">CheckInView</span><span class="p">.</span><span class="n">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="s">"checkin"</span><span class="p">)</span>

<span class="p">...</span> <span class="n">end</span> <span class="n">new</span> <span class="n">code</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">clinic</span><span class="o">/</span><span class="n">views</span><span class="p">.</span><span class="n">py</span>

<span class="p">...</span> <span class="n">new</span> <span class="n">code</span>

<span class="k">class</span> <span class="nc">CheckInView</span><span class="p">(</span><span class="n">FormView</span><span class="p">):</span>
    <span class="n">template_name</span> <span class="o">=</span> <span class="s">"clinic/checkin_patient.html"</span>
    <span class="n">form_class</span> <span class="o">=</span> <span class="n">CheckInForm</span>
    <span class="n">success_url</span> <span class="o">=</span> <span class="n">reverse_lazy</span><span class="p">(</span><span class="s">"clinic:patient_list"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">form_valid</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">form</span><span class="p">):</span>
    <span class="n">form</span><span class="p">.</span><span class="n">save</span><span class="p">()</span>
    <span class="k">return</span> <span class="nb">super</span><span class="p">().</span><span class="n">form_valid</span><span class="p">(</span><span class="n">form</span><span class="p">)</span>

    <span class="p">...</span> <span class="n">end</span> <span class="n">new</span> <span class="n">code</span></code></pre></figure>

<hr />

<p>To implement situation two, we will need new url, because we want an url that can handle argument which is patient primary key.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">clinic</span><span class="o">/</span><span class="n">urls</span><span class="p">.</span><span class="n">py</span>

<span class="p">...</span> <span class="n">new</span> <span class="n">code</span>

<span class="n">path</span><span class="p">(</span><span class="s">"patient_list/&lt;int:pk&gt;/checkin/"</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">CheckInView</span><span class="p">.</span><span class="n">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="s">"checkin_pk"</span><span class="p">)</span>

<span class="p">...</span> <span class="n">end</span> <span class="n">new</span> <span class="n">code</span></code></pre></figure>

<p>Now, the problem is: should we create another view or use the same CheckInView with additional logic inside it ? Here’s what I’ve learn to handle this problem. To handle the problem, we need a condition where if there is primary key, we will return it, or else we will not return anything. Something like this:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">clinic</span><span class="o">/</span><span class="n">views</span><span class="p">.</span><span class="n">py</span>

<span class="p">...</span>

<span class="k">class</span> <span class="nc">CheckInView</span><span class="p">(</span><span class="n">FormView</span><span class="p">):</span>
    <span class="p">...</span> <span class="n">new</span> <span class="n">code</span>

    <span class="k">def</span> <span class="nf">get_context_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">context</span> <span class="o">=</span> <span class="nb">super</span><span class="p">().</span><span class="n">get_context_data</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="n">patient_pk</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">kwargs</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"pk"</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">patient_pk</span><span class="p">:</span>
            <span class="n">patient</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Patient</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">patient_pk</span><span class="p">)</span>
            <span class="n">context</span><span class="p">[</span><span class="s">"patient"</span><span class="p">]</span> <span class="o">=</span> <span class="n">patient</span> 

        <span class="k">return</span> <span class="n">context</span>
    

    <span class="k">def</span> <span class="nf">get_initial</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">initial</span> <span class="o">=</span> <span class="nb">super</span><span class="p">().</span><span class="n">get_initial</span><span class="p">()</span>
        <span class="n">patient_pk</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">kwargs</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"pk"</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">patient_pk</span><span class="p">:</span>
            <span class="n">patient</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Patient</span><span class="p">,</span> <span class="n">pk</span><span class="o">=</span><span class="n">patient_pk</span><span class="p">)</span>
            <span class="n">initial</span><span class="p">[</span><span class="s">"patient"</span><span class="p">]</span> <span class="o">=</span> <span class="n">patient</span>

        <span class="k">return</span> <span class="n">initial</span>

    <span class="p">...</span> <span class="n">end</span> <span class="n">new</span> <span class="n">code</span></code></pre></figure>

<p>What happen in the additional view logic is, we check if primary key available, and then return it. We also need to get initial to fill the form with the data, so we fill the form based on the primary key given. Let’s say our url now is <code class="language-plaintext highlighter-rouge">patient_list/1/checkin/</code>, we’ll use the data from patient with primary key = 1 to fill the form.</p>

<p>This logic actually can be use in many situation, what if you want to fill appointment list with the patient data ? Let’s say you’re the clinic staff, you open this patient detail page –say the name of the patient is Dave. Then you click add appointment, but the form need you to fill the patient data, by using the logic, you have to fill appointment description and date only, not fill it from scratch.</p>

<p>…CYA!</p>]]></content><author><name>rahimi</name></author><summary type="html"><![CDATA[This is how you can get initial data--from models--and show it in form's field. I’m on the journey to finish my diploma Final Year Project, I’ll be building a Clinic Management System using Python Django on the Back-end, Html, Css and Bootstrap5 for the Front-end. In this blog, I want to explain about how we can can get data from primary key and fill a form using it using Class Based View (CBV). The situation is, I want to implement a check in system, where I can check in patient who came to the clinic, and render the data on the webpage. The check in list will be easy, I just have to use to inherit/extends ListView. Example: clinic/urls.py ... app_name = "clinic" urlpatterns = [ path("checkin_list/", views.ListCheckInPageView.as_view(), name="checkin_list"), ] clinic/views.py class ListCheckInPageView(ListView): template_name = "clinic/checkin_list.html" queryset = CheckIn.objects.all().order_by("-check_in_time") # this will display the latest on top context_object_name = "checkin_list" Now, this is easy right ? Well, kinda. The problem is when you want to check in patient based on their data. I have two situation where I want to check in patient 1) from the check in list, I want to implement a link/button to create new check in 2) from patient detail, I want to directly check in current patient and automatically get their data. Situation 1 should be easy to implement, example: clinic/urls.py ... new code path("checkin_list/checkin/" views.CheckInView.as_view(), name="checkin") ... end new code clinic/views.py ... new code class CheckInView(FormView): template_name = "clinic/checkin_patient.html" form_class = CheckInForm success_url = reverse_lazy("clinic:patient_list") def form_valid(self, form): form.save() return super().form_valid(form) ... end new code To implement situation two, we will need new url, because we want an url that can handle argument which is patient primary key. clinic/urls.py ... new code path("patient_list/&lt;int:pk&gt;/checkin/", views.CheckInView.as_view(), name="checkin_pk") ... end new code Now, the problem is: should we create another view or use the same CheckInView with additional logic inside it ? Here’s what I’ve learn to handle this problem. To handle the problem, we need a condition where if there is primary key, we will return it, or else we will not return anything. Something like this: clinic/views.py ... class CheckInView(FormView): ... new code def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) patient_pk = self.kwargs.get("pk") if patient_pk: patient = get_object_or_404(Patient, pk=patient_pk) context["patient"] = patient return context def get_initial(self): initial = super().get_initial() patient_pk = self.kwargs.get("pk") if patient_pk: patient = get_object_or_404(Patient, pk=patient_pk) initial["patient"] = patient return initial ... end new code What happen in the additional view logic is, we check if primary key available, and then return it. We also need to get initial to fill the form with the data, so we fill the form based on the primary key given. Let’s say our url now is patient_list/1/checkin/, we’ll use the data from patient with primary key = 1 to fill the form. This logic actually can be use in many situation, what if you want to fill appointment list with the patient data ? Let’s say you’re the clinic staff, you open this patient detail page –say the name of the patient is Dave. Then you click add appointment, but the form need you to fill the patient data, by using the logic, you have to fill appointment description and date only, not fill it from scratch. …CYA!]]></summary></entry><entry><title type="html">Move To Jekyll</title><link href="http://localhost:4000/2024/08/26/move-to-jekyll.html" rel="alternate" type="text/html" title="Move To Jekyll" /><published>2024-08-26T00:00:00+08:00</published><updated>2024-08-26T00:00:00+08:00</updated><id>http://localhost:4000/2024/08/26/move-to-jekyll</id><content type="html" xml:base="http://localhost:4000/2024/08/26/move-to-jekyll.html"><![CDATA[<div class="tldr">
    Jekyll have been working super fine for me now, I don't have any problem with it even when I try to set it up on different OS with different package manager (Debian based to Arch based).
</div>

<p><strong>Hello, Jekyll!</strong> I actually really love to write and blog, the reason why I’m not updating my blog is because it’s pain in the ass to copy and paste my <code class="language-plaintext highlighter-rouge">base.html</code>–kinda like a template system for my blog. I actually heard about jekyll a long way back, but I don’t have time to try it (or maybe I’m lazy, I don’t know).</p>

<p>So, what I’m looking for is a system or framework that can automate or render my writing into proper html, I try to use Emacs (org to html) and Obsidian (markdown to html) but I’ve never success with the templating system. Yes, I can export my writing into html but I struggle with the templating and styling.</p>

<p>Now that I have some extra time to waste, I want to try jekyll and play around with it. First of all, we have to do some installation and setup before we can use jekyll.</p>

<h3 id="setup">Setup</h3>

<p>I use Linux Mint for this setup, it will be different based on your operating system and distros. You actually can follow the step from jekyll’s <a href="https://jekyllrb.com/docs/">Quickstart</a> and <a href="https://jekyllrb.com/docs/installation/">Installation</a> pages if you have any problems.</p>

<p>Install all the requirements</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">sudo </span>apt <span class="nb">install </span>ruby-full build-essential zlib1g-dev</code></pre></figure>

<p>Add <code class="language-plaintext highlighter-rouge">GEM_HOME</code> and it executable path in <code class="language-plaintext highlighter-rouge">.bashrc</code></p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">.bashrc
<span class="nv">GEM_HOME</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.gems"</span>  <span class="c"># change .gems to gems if you don't want to hide it</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.gems/bin"</span></code></pre></figure>

<p>Install jekyll and bundler</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">gem <span class="nb">install </span>jekyll bundler</code></pre></figure>

<p>Okay, now we’re halfway through the process. We’ve install Ruby, jekyll, and bundler. Now come the fun part, creating our blog. Create a new folder where you want to put your blog, let’s called it <code class="language-plaintext highlighter-rouge">my-blog</code>.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">mkdir</span> <span class="nt">-p</span> Documents/my-blog    <span class="c"># create folder</span>
<span class="nb">cd </span>Documents/my-blog          <span class="c"># change direction into my-blog</span>
bundle init                   <span class="c"># create new Gemfile</span></code></pre></figure>

<p>To add jekyll as dependency, we have to add <code class="language-plaintext highlighter-rouge">gem "jekyll"</code> into Gemfile, and run <code class="language-plaintext highlighter-rouge">bundle</code> to install it. It’s also a good time to start commiting our development journey, let’s initialize a Git repository and commit it.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">git init
vim .gitignore                        <span class="c"># change vim to any editor you comfortable with</span>

.gitignore
Gemfile.lock                            <span class="c"># this will prevent git to add Gemfile.lock into repository</span>

git add <span class="nb">.</span>                             <span class="c"># add all files and folders into stage </span>
git commit <span class="nt">-m</span> <span class="s2">"initial blog setup"</span>    <span class="c"># commit all changes</span></code></pre></figure>

<p>We’re almost there, the last step before we can serve our website is to have a….. website, Duh!. Remember that we still didn’t write any HTML, let’s fix that by creating new <code class="language-plaintext highlighter-rouge">index.html</code> in root folder and write anything you want–this is not HTML tutorial. To start serving your website, run <code class="language-plaintext highlighter-rouge">$ jekyll serve</code> and open <code class="language-plaintext highlighter-rouge">http://localhost:4000</code> on your favorite web browser. Walla, here’s your magnificent, beautiful, little website ready to be seen by the entire world–Nah, just kidding, this only serve the website on your localhost port 4000, you have to deploy it to make it available to the entire world.</p>

<p>Finally, remember that this is the most basic setup, you can follow the official step by step tutorial on jekyll website to get your website running and deploy it to github pages (like me) or maybe on your favorite cloud system or whatever, it’s your blog and you can do whatever you like with it.</p>

<h3 id="reason">Reason</h3>

<p>It’s obvious why I changed to jekyll, but the main reason is the templating system. I already familiar with jinja2 and Django template (I don’t know what they called Django template, so maybe just Django template?), to have this kind of system is the major improvement for any blogger–one more time, I’m not a <strong>blogger</strong> blogger, just a guy who like to write and want to improve his workflow. My old, plain, and traditional blogging system look like this</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">- index.html  
- blogs/
    - base.html
    - blog1.html
    - blog2.html
- statics
    - style.css
    - app.js</code></pre></figure>

<p>I have to edit <code class="language-plaintext highlighter-rouge">base.html</code>, save it as <code class="language-plaintext highlighter-rouge">blog{n}.hmlt</code>, and index it in my index.html. Actually, it’s not so bad, but why not use templating system to make my life easier right ?</p>

<h3 id="conclusion">Conclusion</h3>

<p>Actually, this is the second day I’m using jekyll–on the time I’m writing this post–so I can’t give more comment it pros and cons, and my experience using it, I will come back to it later. But for now, I’m excited to write more blog and to explore more about jekyll–theme? Finally, please, please, please excuse my website’s ugly interface, yeah I know it’s not beautiful (yet!), but I’m going to fix that later!</p>

<hr />

<h3 id="update---28sept2024">Update - 28Sept2024</h3>

<p>See, I have once more install Arch with i3wm and I need to re-setup jekyll. This time, I chose to use <code class="language-plaintext highlighter-rouge">rbenv</code> route to install Ruby, following the guide from <a href="https://www.theodinproject.com/lessons/ruby-installing-ruby">The Odin Project</a>. Here how you can do it too:</p>

<blockquote>
  <p>Note: I already have <code class="language-plaintext highlighter-rouge">base-devel</code> installed, you may need to install it first.</p>
</blockquote>

<p>Install rbenv</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">git clone https://github.com/rbenv/rbenv.git ~/.rbenv <span class="c"># clone rbenv</span>
~/.rbenv/bin/rbenv init <span class="c"># initialize rbenv</span></code></pre></figure>

<p>For some reason, rbenv init command–second command–write the script into .bash_profle and my system cannot read it (or find it), so how I fixed it is by pasting the script to my .bashrc and it work fine.</p>

<p>Install ruby-build</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="si">$(</span>rbenv root<span class="si">)</span><span class="s2">"</span>/plugins
git clone https://github.com/rbenv/ruby-build.git <span class="s2">"</span><span class="si">$(</span>rbenv root<span class="si">)</span><span class="s2">"</span>/plugins/ruby-build
rbenv <span class="nt">-v</span> <span class="c"># this will return rbenv version if successfully installed</span></code></pre></figure>

<p>Then, we can install Ruby</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">rbenv <span class="nb">install</span> <span class="o">{</span>ruby_version<span class="o">}</span> <span class="nt">--verbose</span> <span class="c"># change ruby_version into the version that you want, the latest during my installation is 3.3.5</span>
rbenv global <span class="o">{</span>ruby_version<span class="o">}</span> <span class="c"># change ruby_version to the one that you install, this tell our system which Ruby we want to use</span></code></pre></figure>

<p>Finally, check Ruby version for our system</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">ruby <span class="nt">-v</span> <span class="c"># this should return ruby_version, in my case 3.3.5</span></code></pre></figure>

<p>Now, we can follow our initial setup above, starting from <strong>Add <code class="language-plaintext highlighter-rouge">GEM_HOME</code> and it executable path in <code class="language-plaintext highlighter-rouge">.bashrc</code></strong>.</p>

<p><strong>NOTE</strong> Since this is updated setup, meaning that I already have my blog set up in github, I need to install several gems packages (or modules, I don’t know what you call it) such as pygments.rb, jekyll-sitemap, jekyll-feed, jekyll-seo-tags and github-pages. I installed all this packages with <code class="language-plaintext highlighter-rouge">$ gem install {package_name} # change package_name with the needed packages</code>. <strong>END</strong></p>

<p><strong>NOTE</strong> You also may or may not get error when trying to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, the solution is to run <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>  instead. <strong>END</strong></p>

<p>Have fun and…CYA!</p>]]></content><author><name>rahimi</name></author><summary type="html"><![CDATA[Jekyll have been working super fine for me now, I don't have any problem with it even when I try to set it up on different OS with different package manager (Debian based to Arch based). Hello, Jekyll! I actually really love to write and blog, the reason why I’m not updating my blog is because it’s pain in the ass to copy and paste my base.html–kinda like a template system for my blog. I actually heard about jekyll a long way back, but I don’t have time to try it (or maybe I’m lazy, I don’t know). So, what I’m looking for is a system or framework that can automate or render my writing into proper html, I try to use Emacs (org to html) and Obsidian (markdown to html) but I’ve never success with the templating system. Yes, I can export my writing into html but I struggle with the templating and styling. Now that I have some extra time to waste, I want to try jekyll and play around with it. First of all, we have to do some installation and setup before we can use jekyll. Setup I use Linux Mint for this setup, it will be different based on your operating system and distros. You actually can follow the step from jekyll’s Quickstart and Installation pages if you have any problems. Install all the requirements sudo apt install ruby-full build-essential zlib1g-dev Add GEM_HOME and it executable path in .bashrc .bashrc GEM_HOME="$HOME/.gems" # change .gems to gems if you don't want to hide it export PATH=$PATH:"$HOME/.gems/bin" Install jekyll and bundler gem install jekyll bundler Okay, now we’re halfway through the process. We’ve install Ruby, jekyll, and bundler. Now come the fun part, creating our blog. Create a new folder where you want to put your blog, let’s called it my-blog. mkdir -p Documents/my-blog # create folder cd Documents/my-blog # change direction into my-blog bundle init # create new Gemfile To add jekyll as dependency, we have to add gem "jekyll" into Gemfile, and run bundle to install it. It’s also a good time to start commiting our development journey, let’s initialize a Git repository and commit it. git init vim .gitignore # change vim to any editor you comfortable with .gitignore Gemfile.lock # this will prevent git to add Gemfile.lock into repository git add . # add all files and folders into stage git commit -m "initial blog setup" # commit all changes We’re almost there, the last step before we can serve our website is to have a….. website, Duh!. Remember that we still didn’t write any HTML, let’s fix that by creating new index.html in root folder and write anything you want–this is not HTML tutorial. To start serving your website, run $ jekyll serve and open http://localhost:4000 on your favorite web browser. Walla, here’s your magnificent, beautiful, little website ready to be seen by the entire world–Nah, just kidding, this only serve the website on your localhost port 4000, you have to deploy it to make it available to the entire world. Finally, remember that this is the most basic setup, you can follow the official step by step tutorial on jekyll website to get your website running and deploy it to github pages (like me) or maybe on your favorite cloud system or whatever, it’s your blog and you can do whatever you like with it. Reason It’s obvious why I changed to jekyll, but the main reason is the templating system. I already familiar with jinja2 and Django template (I don’t know what they called Django template, so maybe just Django template?), to have this kind of system is the major improvement for any blogger–one more time, I’m not a blogger blogger, just a guy who like to write and want to improve his workflow. My old, plain, and traditional blogging system look like this - index.html - blogs/ - base.html - blog1.html - blog2.html - statics - style.css - app.js I have to edit base.html, save it as blog{n}.hmlt, and index it in my index.html. Actually, it’s not so bad, but why not use templating system to make my life easier right ? Conclusion Actually, this is the second day I’m using jekyll–on the time I’m writing this post–so I can’t give more comment it pros and cons, and my experience using it, I will come back to it later. But for now, I’m excited to write more blog and to explore more about jekyll–theme? Finally, please, please, please excuse my website’s ugly interface, yeah I know it’s not beautiful (yet!), but I’m going to fix that later! Update - 28Sept2024 See, I have once more install Arch with i3wm and I need to re-setup jekyll. This time, I chose to use rbenv route to install Ruby, following the guide from The Odin Project. Here how you can do it too: Note: I already have base-devel installed, you may need to install it first. Install rbenv git clone https://github.com/rbenv/rbenv.git ~/.rbenv # clone rbenv ~/.rbenv/bin/rbenv init # initialize rbenv For some reason, rbenv init command–second command–write the script into .bash_profle and my system cannot read it (or find it), so how I fixed it is by pasting the script to my .bashrc and it work fine. Install ruby-build mkdir -p "$(rbenv root)"/plugins git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build rbenv -v # this will return rbenv version if successfully installed Then, we can install Ruby rbenv install {ruby_version} --verbose # change ruby_version into the version that you want, the latest during my installation is 3.3.5 rbenv global {ruby_version} # change ruby_version to the one that you install, this tell our system which Ruby we want to use Finally, check Ruby version for our system ruby -v # this should return ruby_version, in my case 3.3.5 Now, we can follow our initial setup above, starting from Add GEM_HOME and it executable path in .bashrc. NOTE Since this is updated setup, meaning that I already have my blog set up in github, I need to install several gems packages (or modules, I don’t know what you call it) such as pygments.rb, jekyll-sitemap, jekyll-feed, jekyll-seo-tags and github-pages. I installed all this packages with $ gem install {package_name} # change package_name with the needed packages. END NOTE You also may or may not get error when trying to run jekyll serve, the solution is to run bundle exec jekyll serve instead. END Have fun and…CYA!]]></summary></entry><entry><title type="html">Technical Interview</title><link href="http://localhost:4000/2024/01/22/technical-interview.html" rel="alternate" type="text/html" title="Technical Interview" /><published>2024-01-22T00:00:00+08:00</published><updated>2024-01-22T00:00:00+08:00</updated><id>http://localhost:4000/2024/01/22/technical-interview</id><content type="html" xml:base="http://localhost:4000/2024/01/22/technical-interview.html"><![CDATA[<div class="tldr">
    Well, my first ever technical interview which obviously I failed.
</div>

<p>Hello world, one of my goals for this year is to get an IT job, the positions that I focus on are backend engineer and software tester (manual or automation). Since I’m already on my second year of my diploma, I tried to apply for some job which I think suits me and where I can get a real experiences from. Even though I really want to start working and learn hands on this year, I don’t have high hope that I can land a job since I know the job market for IT this year has been unstable with all the layoff and stuff, but I want to try my luck and see what happen.</p>

<p>To my suprise, there’s some companies who reach back and want to interview me. Unfortunately, I have to reject one interview (backend/embedded engineer), due to it being too far from my home and they didn’t allowed work from home. Actually, I don’t care about working from office, I just don’t want to spend half of my day on the road commuting from home to office and back.</p>

<p>There’s one more company for backend engineer internship approached and asked me to fill a Google Form regarding my details and tech stack. So I fill out the form and… I don’t know maybe they’re ok with my details and tech stack so they asked me to attend IQ test and technical test on wed, 17 Jan 2024. So this is my first technical interview experiences.</p>

<p>I have two and a half day to prepare for my first technical test, first thing that come to mind is LeetCode. I have never tried LeetCode before and I know I suck at problem solving, this is because I spend too much time on learning programming languages instead of learning programming and problem solving. I can solved two sum with two for loops but I know, this is not the optimum answer, then I study the solution which using map or dictionary. I realized now that I’m suck at problem solving and I need to study more. I don’t know what to expect for my interview, I just hope that they didn’t have this kind of questions.</p>

<p>During the interview, there’s only one person and she didn’t asked me too many question since this is not behavioral interview, so she just asked me to introduced myself and I can start if I’m ready. When I said I’m ready, she shared with me the IQ test questions and I have to share my screen to answer the questions, they were all subjective questions where you have to think about the answer and there’s no hint. I guess I can answer most of them, even though I don’t know how IQ test work and I don’t even know if my answers are correct or not. What shock me the most is that I have to really write the answer for IQ test, I thought all IQ test use Multi Choice Question (MCQ) format but not this time I guess.</p>

<p>After IQ test, we go straight to technical test. So the questions are not too bad, it just….. I blank. I’m not sure how to describe the situation but I can’t think straight and I kinda lost it. So I have a choice whether to write complete code in python or just write pseudocode, obviously this will affect the mark –since they are looking for python developer. The problem happened when I tried to write python code for question one but when I run it, it doesn’t do what it’s supposed to do, so I panicked and I think that’s the reason why I can’t answer most of the questions. When I checked back the questions after the interview, I started to laugh out loud and think “what the heck is wrong with me, how can I be so stupid ?”.”</p>

<p>Here are the questions and how I solved it <strong>after</strong> the interview, I can’t remember how I answer it during the interview because I give up writing the answer in python after it failed to run as intended for question one. I guess I got it all right using pseudocode but who know ? Maybe they will review it back with me later.</p>

<p><strong>Notes</strong> All the question have been changed to make it shorter, and the answer is not the answer I write during the interview, this is the answer I think of after the interview. <strong>END</strong></p>

<h3 id="question-one">Question One</h3>

<p>Given two list of names, return new list without duplicate values.
Example:
name_1 = [“ava”, “olivia”, “emma”]
name_2 = [“olivia”, “sophia”, “emma”]
unique_names(name_1, name_2)
should return [“emma”, “olivia”, “sophia”]</p>

<p><strong>My answer</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">unique_names</span><span class="p">(</span><span class="n">l</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">ll</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="n">names</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="n">ll</span>
    <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">names</span><span class="p">))</span></code></pre></figure>

<hr />

<h3 id="question-two">Question Two:</h3>

<p>Create a function find_roots to find the roots of the quadratic equation: ax**2 + bx + c = 0. You can find the formula for the roots of the quadratic equation <a href="https://en.wikipedia.org/wiki/Quadratic_equation">here.</a></p>

<p><strong>My answer:</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">math</span>
<span class="k">def</span> <span class="nf">find_roots</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">c</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="n">d</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">b</span><span class="o">**</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">a</span> <span class="o">*</span> <span class="n">c</span><span class="p">)</span>
    <span class="n">root_1</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">b</span> <span class="o">+</span> <span class="n">d</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">a</span><span class="p">)</span>
    <span class="n">root_2</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">b</span> <span class="o">-</span> <span class="n">d</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">a</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">root_1</span><span class="p">,</span> <span class="n">root_2</span><span class="p">]</span></code></pre></figure>

<hr />

<h3 id="question-three">Question Three:</h3>

<p>Given a files with key value of k: text_file_name, v: name, return a map of k: name, v: list_of_text_file_name.</p>

<p><strong>My answer:</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">files</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"Input.txt"</span> <span class="p">:</span> <span class="s">"Randy"</span><span class="p">,</span>
    <span class="s">"Code.py"</span> <span class="p">:</span> <span class="s">"Stan"</span><span class="p">,</span>
    <span class="s">"Output.txt"</span> <span class="p">:</span> <span class="s">"Randy"</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">group_by_owner</span><span class="p">(</span><span class="n">files</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">m</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">files</span><span class="p">.</span><span class="n">item</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">v</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">m</span><span class="p">:</span>
            <span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">k</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">m</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">m</span></code></pre></figure>

<hr />

<h3 id="question-four">Question Four:</h3>

<p>Implement TextInput class that contains method add(text), which add given text to the current value. Method get_value(), which return the current value in string
Implement NumericInput class that inherit from TextInput, override the add method so that each non-numeric text is ignored.</p>

<p><strong>My answer</strong></p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">TextInput</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">text</span>    
    <span class="k">def</span> <span class="nf">get_value</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">value</span>
<span class="k">class</span> <span class="nc">NumericInput</span><span class="p">(</span><span class="n">TextInput</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">text</span><span class="p">.</span><span class="n">isdigit</span><span class="p">():</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">value</span> <span class="o">+=</span> <span class="n">text</span></code></pre></figure>

<hr />

<h3 id="conclusion">Conclusion</h3>

<p>I know, the questions were easy and it should really be a problem. I guess everybody have this <em>first-time-syndrome</em>, where they’re easily panic and can’t focus to think clearly. Other reason why I’m panic is because I have this expectation that they will give me LeetCode’s style of question and that make me panic even before I see the questions.</p>

<p>So yeah, that’s my first ever technical interview experiences, even though I don’t have high expectation regarding the result, I’ll be lying if I say that I don’t want it to pass. Finally, there’s alot to learn and to be improve in the future, let’s try our best to get what we want and …CYA!</p>]]></content><author><name>rahimi</name></author><summary type="html"><![CDATA[Well, my first ever technical interview which obviously I failed. Hello world, one of my goals for this year is to get an IT job, the positions that I focus on are backend engineer and software tester (manual or automation). Since I’m already on my second year of my diploma, I tried to apply for some job which I think suits me and where I can get a real experiences from. Even though I really want to start working and learn hands on this year, I don’t have high hope that I can land a job since I know the job market for IT this year has been unstable with all the layoff and stuff, but I want to try my luck and see what happen. To my suprise, there’s some companies who reach back and want to interview me. Unfortunately, I have to reject one interview (backend/embedded engineer), due to it being too far from my home and they didn’t allowed work from home. Actually, I don’t care about working from office, I just don’t want to spend half of my day on the road commuting from home to office and back. There’s one more company for backend engineer internship approached and asked me to fill a Google Form regarding my details and tech stack. So I fill out the form and… I don’t know maybe they’re ok with my details and tech stack so they asked me to attend IQ test and technical test on wed, 17 Jan 2024. So this is my first technical interview experiences. I have two and a half day to prepare for my first technical test, first thing that come to mind is LeetCode. I have never tried LeetCode before and I know I suck at problem solving, this is because I spend too much time on learning programming languages instead of learning programming and problem solving. I can solved two sum with two for loops but I know, this is not the optimum answer, then I study the solution which using map or dictionary. I realized now that I’m suck at problem solving and I need to study more. I don’t know what to expect for my interview, I just hope that they didn’t have this kind of questions. During the interview, there’s only one person and she didn’t asked me too many question since this is not behavioral interview, so she just asked me to introduced myself and I can start if I’m ready. When I said I’m ready, she shared with me the IQ test questions and I have to share my screen to answer the questions, they were all subjective questions where you have to think about the answer and there’s no hint. I guess I can answer most of them, even though I don’t know how IQ test work and I don’t even know if my answers are correct or not. What shock me the most is that I have to really write the answer for IQ test, I thought all IQ test use Multi Choice Question (MCQ) format but not this time I guess. After IQ test, we go straight to technical test. So the questions are not too bad, it just….. I blank. I’m not sure how to describe the situation but I can’t think straight and I kinda lost it. So I have a choice whether to write complete code in python or just write pseudocode, obviously this will affect the mark –since they are looking for python developer. The problem happened when I tried to write python code for question one but when I run it, it doesn’t do what it’s supposed to do, so I panicked and I think that’s the reason why I can’t answer most of the questions. When I checked back the questions after the interview, I started to laugh out loud and think “what the heck is wrong with me, how can I be so stupid ?”.” Here are the questions and how I solved it after the interview, I can’t remember how I answer it during the interview because I give up writing the answer in python after it failed to run as intended for question one. I guess I got it all right using pseudocode but who know ? Maybe they will review it back with me later. Notes All the question have been changed to make it shorter, and the answer is not the answer I write during the interview, this is the answer I think of after the interview. END Question One Given two list of names, return new list without duplicate values. Example: name_1 = [“ava”, “olivia”, “emma”] name_2 = [“olivia”, “sophia”, “emma”] unique_names(name_1, name_2) should return [“emma”, “olivia”, “sophia”] My answer def unique_names(l: list[str], ll: list[int]) -&gt; list[int]: names = l + ll return list(set(names)) Question Two: Create a function find_roots to find the roots of the quadratic equation: ax**2 + bx + c = 0. You can find the formula for the roots of the quadratic equation here. My answer: import math def find_roots(a: int, b: int, c: int) -&gt; list[int]: d = math.sqrt(b**2 - 4 * a * c) root_1 = (-b + d) / (2 * a) root_2 = (-b - d) / (2 * a) return [root_1, root_2] Question Three: Given a files with key value of k: text_file_name, v: name, return a map of k: name, v: list_of_text_file_name. My answer: files = { "Input.txt" : "Randy", "Code.py" : "Stan", "Output.txt" : "Randy" } def group_by_owner(files: dict) -&gt; dict: m = {} for k, v in files.item(): if v not in m: m[v] = [k] else: m[v].append(k) return m Question Four: Implement TextInput class that contains method add(text), which add given text to the current value. Method get_value(), which return the current value in string Implement NumericInput class that inherit from TextInput, override the add method so that each non-numeric text is ignored. My answer class TextInput: def __init__(self): self.value = "" def add(self, text): self.value = text def get_value(self): return self.value class NumericInput(TextInput): def add(self, text): if text.isdigit(): self.value += text Conclusion I know, the questions were easy and it should really be a problem. I guess everybody have this first-time-syndrome, where they’re easily panic and can’t focus to think clearly. Other reason why I’m panic is because I have this expectation that they will give me LeetCode’s style of question and that make me panic even before I see the questions. So yeah, that’s my first ever technical interview experiences, even though I don’t have high expectation regarding the result, I’ll be lying if I say that I don’t want it to pass. Finally, there’s alot to learn and to be improve in the future, let’s try our best to get what we want and …CYA!]]></summary></entry><entry><title type="html">Programming</title><link href="http://localhost:4000/2023/10/31/programming.html" rel="alternate" type="text/html" title="Programming" /><published>2023-10-31T00:00:00+08:00</published><updated>2023-10-31T00:00:00+08:00</updated><id>http://localhost:4000/2023/10/31/programming</id><content type="html" xml:base="http://localhost:4000/2023/10/31/programming.html"><![CDATA[<div class="tldr">
    This is a brief history on how I start to learn program and what make me want to learn more about technology and programming in general.
</div>

<p>I started learning how to programming back in 2019, when I’m nearly 30 years old. I always think that I’m kinda late into the game and that’s one of the thing that I regret in life, among others. I’ve always love technology stuff when I was a kid, my family own a computer when I am 7 - 8 years old, but I’ve never learn programming back then.</p>

<p>Don’t get me wrong, it’s not like I’m a pro coder now, or I’ve built some life changing applications, it’s just I really love coding and learn new programming languages. The first programming language that I learn back then was C++ and guess what? I failed. I didn’t make it pass variable section because I was very busy back then with my full time hob and life responsibilities (<strong>C++ was very hard too</strong>).</p>

<p>The first C++ code I wrote is this simple profit calculator, life changing right ?!</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">string</span> <span class="n">whatToSell</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">capitalMoney</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">todaySales</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Tell me what do you want to sell: "</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">whatToSell</span><span class="p">;</span>
    
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"This is your "</span> <span class="o">&lt;&lt;</span> <span class="n">whatToSell</span> <span class="o">&lt;&lt;</span> <span class="s">" business calculator</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Enter your entry money: "</span><span class="p">;</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">capitalMoney</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Enter today sales: "</span><span class="p">;</span>

    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">todaySales</span><span class="p">;</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Your profit for today is "</span> <span class="o">&lt;&lt;</span> <span class="n">todaySales</span> <span class="o">-</span> <span class="n">capitalMoney</span><span class="o">&lt;&lt;</span> <span class="s">"."</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>I stop programming for awhile and then came back with Python, that’s the best time of my life and I really enjoy the learning process, I learn most of programming concept by learning python. I learn about variable, loop, function, oop and many more. This is not an advertisement or promoting Python programming language, but I really recommend people who want to learn programming to learn Python. This is because it help to teach you the concept of programming language properly, after that, you can move on to any language that you like. For people who like web development especially frontend, you can start by learning javascript.</p>

<p>While learning Python, I heard about Linux and I become curious, really curious. I started to dig more about Linux, I have my own computer that time (late of 2019) and I installed Ubuntu out of curiosity, I never looked back at Windows since then. I don’t remember what version of Ubuntu I used back then, but I installed the latest version (non lts) and I really love it back then, it run smooth, there’s so many things to do and I really love learning about it. I started to learn about command line and the power of it, how I can use my computer with only command line. Linux is becoming my new best friend that time.</p>

<p>The problem is, I have this new addiction which is Linux, I started to distro hopped a lot, and well, I kinda stop learning programming and start to try various flavor of distros available. After many years, I have this realization that it’s actually not about the distro, it’s more about the desktop environment. I’m most comfortable with Cinnamon and Xfce DE but I use i3 the most. The reason is because it help to improve my workflow.</p>

<p>Now, I really want to get back into programming. So last year, I register with one of the university in my country for <strong>diploma in information technology</strong> (part time). I learn a ton of new things such as computer architecture, operation system, mathematic for IT and many more technology stuff, but they only teach the basic of programming using C and Java. I heard about Rust and look into it, it is really interesting and I planned to learn it during semester break, I can’t learn it now as I have to finish my assignment and prepare for my final exam (school huh?).</p>

<p>I still learn Python in my free time, I’ve start to get into backend development using Django (To-Do apps incoming :p).</p>

<p>Self Reminder: Remember to touch grass once in a while.</p>]]></content><author><name>rahimi</name></author><summary type="html"><![CDATA[This is a brief history on how I start to learn program and what make me want to learn more about technology and programming in general. I started learning how to programming back in 2019, when I’m nearly 30 years old. I always think that I’m kinda late into the game and that’s one of the thing that I regret in life, among others. I’ve always love technology stuff when I was a kid, my family own a computer when I am 7 - 8 years old, but I’ve never learn programming back then. Don’t get me wrong, it’s not like I’m a pro coder now, or I’ve built some life changing applications, it’s just I really love coding and learn new programming languages. The first programming language that I learn back then was C++ and guess what? I failed. I didn’t make it pass variable section because I was very busy back then with my full time hob and life responsibilities (C++ was very hard too). The first C++ code I wrote is this simple profit calculator, life changing right ?! int main() { string whatToSell; float capitalMoney; float todaySales; cout &lt;&lt; "Tell me what do you want to sell: "; cin &gt;&gt; whatToSell; cout &lt;&lt; "This is your " &lt;&lt; whatToSell &lt;&lt; " business calculator\n"; cout &lt;&lt; "Enter your entry money: "; cin &gt;&gt; capitalMoney; cout &lt;&lt; "Enter today sales: "; cin &gt;&gt; todaySales; cout &lt;&lt; "Your profit for today is " &lt;&lt; todaySales - capitalMoney&lt;&lt; "."; return 0; } I stop programming for awhile and then came back with Python, that’s the best time of my life and I really enjoy the learning process, I learn most of programming concept by learning python. I learn about variable, loop, function, oop and many more. This is not an advertisement or promoting Python programming language, but I really recommend people who want to learn programming to learn Python. This is because it help to teach you the concept of programming language properly, after that, you can move on to any language that you like. For people who like web development especially frontend, you can start by learning javascript. While learning Python, I heard about Linux and I become curious, really curious. I started to dig more about Linux, I have my own computer that time (late of 2019) and I installed Ubuntu out of curiosity, I never looked back at Windows since then. I don’t remember what version of Ubuntu I used back then, but I installed the latest version (non lts) and I really love it back then, it run smooth, there’s so many things to do and I really love learning about it. I started to learn about command line and the power of it, how I can use my computer with only command line. Linux is becoming my new best friend that time. The problem is, I have this new addiction which is Linux, I started to distro hopped a lot, and well, I kinda stop learning programming and start to try various flavor of distros available. After many years, I have this realization that it’s actually not about the distro, it’s more about the desktop environment. I’m most comfortable with Cinnamon and Xfce DE but I use i3 the most. The reason is because it help to improve my workflow. Now, I really want to get back into programming. So last year, I register with one of the university in my country for diploma in information technology (part time). I learn a ton of new things such as computer architecture, operation system, mathematic for IT and many more technology stuff, but they only teach the basic of programming using C and Java. I heard about Rust and look into it, it is really interesting and I planned to learn it during semester break, I can’t learn it now as I have to finish my assignment and prepare for my final exam (school huh?). I still learn Python in my free time, I’ve start to get into backend development using Django (To-Do apps incoming :p). Self Reminder: Remember to touch grass once in a while.]]></summary></entry><entry><title type="html">Arch Linux</title><link href="http://localhost:4000/2023/10/01/arch-linux.html" rel="alternate" type="text/html" title="Arch Linux" /><published>2023-10-01T00:00:00+08:00</published><updated>2023-10-01T00:00:00+08:00</updated><id>http://localhost:4000/2023/10/01/arch-linux</id><content type="html" xml:base="http://localhost:4000/2023/10/01/arch-linux.html"><![CDATA[<p><strong>I use Arch BTW!</strong></p>

<p>I have been a avid linux user since the late of 2019 due to my obsession with Mr. Robot and hacker wannabe cringey teenager. Long story short, I failed on my attemp to be a hacker <strong>obviously</strong>, and after distros later, I stick with Linux Mint.</p>

<p>The reason is 1) easy to setup and work out of the box 2) familiarity with Ubuntu make is easier to use.</p>

<p>I also happen to own several old laptops that have been collecting dust since I don’t know when, and I think it just normal, <strong>very normal</strong> for me to use it to install linux distros of various flavour. Honestly, I just love to distro hop and play around with my system, the feeling when you installed it successfully on bare metal is very satisfying. I have tried some major distros including Debian, Fedora, Arch, and void –including their child.</p>

<p>The point is, I have spend countless hour installing and setup my freshly installed linux distro –the best part–I’ve repeat this cycle so many time, but I always go back to Linux Mint. But, this is not about my linux journey or how I really really love Linux Mint, this is about my transition from Linux Mint to Arch Linux (for a n times).</p>

<p>Here’s the story, I’ve use Arch multiple times before and my setup is basically the same, Arch + i3. I really love tiling window and i3 happen to be the first one that I tried and I don’t bother to change to other tiling window manager for whatever reasons (sway look fun), i3 just work for me and I really love the workflow (<strong>For now</strong>). But as I said before, I always go back to Linux Mint because it’s really feel like home to me. There’s a time when I used Arch for a month then I changed back to Linux Mint for no reason, that how I love Linux Mint.</p>

<p>But, I have this habit where I like to start fresh every time I start a new semester, new book, new pen/pencil, new OS etc. Yes I’m old but I’m still a student. So this time I think to myself, “let’s try to use Arch for this whole semester”, and the journey start on September 2023.</p>

<p>The installation is quiet easy since I’ve done it so many times and I have some script for packages that needed to be install during installation and all. To be honest, the installation process is not so hard and everyone can do it if they can read the wiki properly, just remember to install network manager <code class="language-plaintext highlighter-rouge">networkmanager</code> and boot manager (I use <code class="language-plaintext highlighter-rouge">grub</code>) and you will be safe. It’s very important to make sure you install grub instead of just download it. There’re two separate command to download and install grub. To be fair, I have managed to forgot about this several time, it will be pain to chroot back and install it so usually I just start new installation.</p>

<p>The reason why I love Debian based distro and always going back to Linux Mint is because it’s easier to find .deb packages. The packages that I have to installed no matter what is Visual Studio Code and Google Chrome for college, and pacman doesn’t have them. So that’s the main reason why I used Debian based distro before….. I know how to use AUR properly. Both Visual Studio Code and Google Chrome can be install using AUR and I used yay to manage my AUR. It get easier after you know what you want to do right ?</p>

<p>The way I setup my system is by using alacritty as my main terminal emulator and I set it on my first workspace, second workspace is for browsers such as Firefox <strong>For my personal browsing stuff</strong> and Google Chrome <strong>For college stuff only</strong>. Then I have Visual Studio Code run on workspace 3 and other software on other workspaces.</p>

<p>This ensure my productivity and make it easier for me to do my work when I can switch workspaces like that, its like my brain have been wired with this setup. I also used tmux and neovim(__lazyvim) for coding personal project and editing text. It’s not like I’m good at vim, I just love the keybinding especially vim movement. I also use vim extension on Visual Studio Code because I used to it. I try emacs and still use it sometime, there’s this phase where I force myself to learn emacs until I get good with it, but I still need vim keybinding and movement because emacs movement is quite awkward for my fingers. It’s not emacs fault tho, actually I really like it for customization and extension but I just love vim more.</p>

<blockquote>
  <p>“There’s no need to fight which one is better and all, just use which one make you more comfortable, I learn vim first then emacs, so maybe that’s the reason why vim is my choice, maybe I will use emacs if I learn it first, who know?”</p>
</blockquote>

<p>For file manager, I use pcmanfm because it’s really lightweight and set it to spawn at workspace 4. Actually, file manager and mount thinggy was also one of the reason why I changed distro back then, I used external hard disk a lot and I don’t know how to automatically mount it, I have to <code class="language-plaintext highlighter-rouge">sudo mount /dev/blabla /mnt/blabla</code> every time and it can get very tired right?! I know I’m stupid, the only thing that I have to install is <code class="language-plaintext highlighter-rouge">gvfs</code> and it help to mount the drive automatically so my problem is solved.</p>

<p>Other software that I use is Okular for PDF viewer, this is very important for me since all my college’s resources and book are in PDF so I choose Okular because it’s easy to use. VLC for video and music player, actually I didn’t listen to music much and I use Spotify whenever I want to listen to music. Thanks again for AUR.</p>

<p>It’s been almost a month since I use Arch and I hope that I can maintain and use it atleast until January which will be the end of this semester, then maybe I can change to other distro or back to my beloved Linux Mint. I also planned to keep updating about my journey with Arch Linux or……. my journey with other distro if I change to other distro.</p>

<p>For now, Arch is very good and I start to maintain it very well, the most important thing is it have all the software needed for my college. It will be pointless if it didn’t support the software needed for my college.</p>]]></content><author><name>rahimi</name></author><summary type="html"><![CDATA[I use Arch BTW! I have been a avid linux user since the late of 2019 due to my obsession with Mr. Robot and hacker wannabe cringey teenager. Long story short, I failed on my attemp to be a hacker obviously, and after distros later, I stick with Linux Mint. The reason is 1) easy to setup and work out of the box 2) familiarity with Ubuntu make is easier to use. I also happen to own several old laptops that have been collecting dust since I don’t know when, and I think it just normal, very normal for me to use it to install linux distros of various flavour. Honestly, I just love to distro hop and play around with my system, the feeling when you installed it successfully on bare metal is very satisfying. I have tried some major distros including Debian, Fedora, Arch, and void –including their child. The point is, I have spend countless hour installing and setup my freshly installed linux distro –the best part–I’ve repeat this cycle so many time, but I always go back to Linux Mint. But, this is not about my linux journey or how I really really love Linux Mint, this is about my transition from Linux Mint to Arch Linux (for a n times). Here’s the story, I’ve use Arch multiple times before and my setup is basically the same, Arch + i3. I really love tiling window and i3 happen to be the first one that I tried and I don’t bother to change to other tiling window manager for whatever reasons (sway look fun), i3 just work for me and I really love the workflow (For now). But as I said before, I always go back to Linux Mint because it’s really feel like home to me. There’s a time when I used Arch for a month then I changed back to Linux Mint for no reason, that how I love Linux Mint. But, I have this habit where I like to start fresh every time I start a new semester, new book, new pen/pencil, new OS etc. Yes I’m old but I’m still a student. So this time I think to myself, “let’s try to use Arch for this whole semester”, and the journey start on September 2023. The installation is quiet easy since I’ve done it so many times and I have some script for packages that needed to be install during installation and all. To be honest, the installation process is not so hard and everyone can do it if they can read the wiki properly, just remember to install network manager networkmanager and boot manager (I use grub) and you will be safe. It’s very important to make sure you install grub instead of just download it. There’re two separate command to download and install grub. To be fair, I have managed to forgot about this several time, it will be pain to chroot back and install it so usually I just start new installation. The reason why I love Debian based distro and always going back to Linux Mint is because it’s easier to find .deb packages. The packages that I have to installed no matter what is Visual Studio Code and Google Chrome for college, and pacman doesn’t have them. So that’s the main reason why I used Debian based distro before….. I know how to use AUR properly. Both Visual Studio Code and Google Chrome can be install using AUR and I used yay to manage my AUR. It get easier after you know what you want to do right ? The way I setup my system is by using alacritty as my main terminal emulator and I set it on my first workspace, second workspace is for browsers such as Firefox For my personal browsing stuff and Google Chrome For college stuff only. Then I have Visual Studio Code run on workspace 3 and other software on other workspaces. This ensure my productivity and make it easier for me to do my work when I can switch workspaces like that, its like my brain have been wired with this setup. I also used tmux and neovim(__lazyvim) for coding personal project and editing text. It’s not like I’m good at vim, I just love the keybinding especially vim movement. I also use vim extension on Visual Studio Code because I used to it. I try emacs and still use it sometime, there’s this phase where I force myself to learn emacs until I get good with it, but I still need vim keybinding and movement because emacs movement is quite awkward for my fingers. It’s not emacs fault tho, actually I really like it for customization and extension but I just love vim more. “There’s no need to fight which one is better and all, just use which one make you more comfortable, I learn vim first then emacs, so maybe that’s the reason why vim is my choice, maybe I will use emacs if I learn it first, who know?” For file manager, I use pcmanfm because it’s really lightweight and set it to spawn at workspace 4. Actually, file manager and mount thinggy was also one of the reason why I changed distro back then, I used external hard disk a lot and I don’t know how to automatically mount it, I have to sudo mount /dev/blabla /mnt/blabla every time and it can get very tired right?! I know I’m stupid, the only thing that I have to install is gvfs and it help to mount the drive automatically so my problem is solved. Other software that I use is Okular for PDF viewer, this is very important for me since all my college’s resources and book are in PDF so I choose Okular because it’s easy to use. VLC for video and music player, actually I didn’t listen to music much and I use Spotify whenever I want to listen to music. Thanks again for AUR. It’s been almost a month since I use Arch and I hope that I can maintain and use it atleast until January which will be the end of this semester, then maybe I can change to other distro or back to my beloved Linux Mint. I also planned to keep updating about my journey with Arch Linux or……. my journey with other distro if I change to other distro. For now, Arch is very good and I start to maintain it very well, the most important thing is it have all the software needed for my college. It will be pointless if it didn’t support the software needed for my college.]]></summary></entry></feed>